Jeffrey's in-Project Notes
See also: https://www.notion.so/whistlegraph/9abf76a4437a46199087176bd06657ea?v=98b5d3a8965e47d9a4c177dd5147960d

🌟 Current

- Fix the issue where sometimes frames are missed "Failed to construct ImageData"
  when refreshing. (Use tracker to test this.)

- Make a 1px drawing tool.

⏳ Next

Make a camera-based chalk drawing pad tool.
  - Use a naive approach similar to my old software from the Oberlin lecture.
  - Also research ML based object tracking with latency.

Make Shrub.

Add "load URL" command to the prompt so any disk can be loaded from any URL.
    Then disk development can begin. (Once prompt actually generates docs.)
        - Would the best way to produce a scripting language be by making a fully
          curry-able system or some domain specific languages using `` then
          combining them?
    Could an editing session or new disk be started from the prompt? Maybe it
    could load a GitHub codespace?

Implement drawing / gesture based disk launchers from the prompt.

Take over right click so no context menu shows up.

Pass 'diskTime' global into the api.

Add scriptProcessorNode fallback so audio can run within insecure contexts. (FigJam)

Stop tracks in all mediaStreams: https://stackoverflow.com/a/12436772
(Video and Microphone)

Add recording: https://stackoverflow.com/questions/19235286/convert-html5-canvas-sequence-to-a-video-file

Add pixels via: https://codepen.io/oceangermanique/pen/LqaPgO.

Adjust pixel scaling / `frame` algorithm so that pixels are always the same size
at different scale levels.

Add $api.sound.beatCount counter to `beat`.

Refactor (screen.width -> screen.w & screen.height -> screen.h) across the board?
  - To be more consistent with `graph.box`.

📩 Future

📅 End of January
  - Shader situation. `const fragmentEffect = video('webgl', screen.width, screen.height)`
  - Research software shaders.

What would a build script for releasing a single disk or
stack of disks look like?

  1. Make a new directory D for the build.
  2. Copy a subset of /disks/public to D/disks
  3. Copy index.html, style.css, boot.js and /computer to D.
  4. Modify boot.js to start loading from the first listed disk.
  5. Generate metadata.json for the work.
  6. Zip and upload to fxHash or put whole directory into Pinata.
  7. Test to make sure everything works.
  8. Mint on a contract (or Cancel and remove files from IPFS).

What would a full system / suite release look like?

1. Using the build script with a set of chosen disks where the main
  disk is a shell interface.

TODO: Document the API by generating the commands inside a disk and print
      them to the console using keyboard shortcuts.

      - Generate full API docs in the prompt disk.

TODO: Make my first generative disk / piece and mint it.
      - Test it in Chrome / Safari / and Firefox.

TODO: Make a quick fullscreen button (make a new keyboard input module).

TODO: Fix Firefox: https://bugzilla.mozilla.org/show_bug.cgi?id=1247687

TODO: Add a new deployment scheme that actually allows my websocket server to
      function... this might mean leaving behind Vercel or configuring it
      for different directories in my repository, running separate server code
      for sockets.

TODO: Add syntax notification of some kind for disk files, using a comment at
      the top. This would eventually allow me to completely
      change from JavaScript.

TODO: Add stochastic syntax / DSL for basic drawing?
      Example: wipe.ink.line.line.line.ink("red").box;

TODO: What cryptocurrency / web3.js lib would I hook an editor up to
      for minting, uploading edition data, etc?

TODO: Make a video-recording app that generates 3 letter codes? - to augment
      my hand-written notes and pages.

TODO: Add ability to define the logical / simulation framerate.

TODO: Give myself the ability to automate testing of system using "robot".

TODO: Write a simple note taking program with saving and loading of drawings
 and also recording and playback?

TODO: Ink types? ... can they be procedural using a buffer?

